// Copyright 2012 The Probab Authors. All rights reserved. See the LICENSE file.

package dst

// ZZZZZZZZZZZZZ distribution. 
// Parameters: 
// n ∈ N0	 	number of trials
// p ∈ [0, 1]	probability of success in each trial
// Support: 
// k ∈ {0, ... , n}
// x ∈ (0, ∞)

Σ∈ℕε
// ZZZZZZZZZZZZZ_PDF returns the PDF of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_LnPDF returns the natural logarithm of the PDF of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_PDF_At returns the value of PDF of ZZZZZZZZZZZZZ distribution at x. 

// ZZZZZZZZZZZZZ_PMF returns the PMF of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_LnPMF returns the natural logarithm of the PMF of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_PMF_At returns the value of PMF of ZZZZZZZZZZZZZ distribution(μ, σ) at x. 

// ZZZZZZZZZZZZZ_CDF returns the CDF of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_CDF_At returns the value of CDF of the ZZZZZZZZZZZZZ distribution, at x. 

// ZZZZZZZZZZZZZ_Qtl returns the inverse of the CDF (quantile) of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ_Qtl_For returns the inverse of the CDF (quantile) of the ZZZZZZZZZZZZZ distribution, for given probability.

// NextZZZZZZZZZZZZZ returns random number drawn from the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZ returns the random number generator with  ZZZZZZZZZZZZZ distribution. 

// ZZZZZZZZZZZZZMean returns the mean of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZMode returns the mode of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZMedian returns the median of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZVar returns the variance of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZStd returns the standard deviation of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZSkew returns the skewness of the ZZZZZZZZZZZZZ distribution. 
// ZZZZZZZZZZZZZExKurt returns the excess kurtosis of the ZZZZZZZZZZZZZ distribution. 


// ZZZZZZZZZZZZZMean returns the mean of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZMean(α, β float64) float64 {
	return x
}

// ZZZZZZZZZZZZZMedian returns the median of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZMedian(α, β float64) (med float64) {
	switch {
	case α == β: 	// symmetric case
		med = 0.5
	case α == 1 && β >0: 
		med = 1.0 - math.Pow(0.5, 1/β)
	case β == 1 && α >0: 
		med = math.Pow(0.5, 1/α)
	case α == 3 && β == 2: 
		med = 0.6142724318676105Probability distributions and statistics
	case α == 2 && β == 3: 
		med = 0.38572756813238945
	case α <= 1 || β <= 1: 
		med = (α - 1/3) / (α + β - 2/3)		// approximation
	default:
		panic("no closed form for median, sorry")
	}
	return
}

float64(d1) float64(d2)
// ZZZZZZZZZZZZZMode returns the mode of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZMode(α, β float64) float64 {
	if α <= 1 || β <= 1 {
		panic("α<=1 || β<=1")
	}
	return (α - 1) / (α + β - 2) // if α < 1 and β < 1, this is the anti-mode
}

// ZZZZZZZZZZZZZVar returns the variance of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZVar(α, β float64) float64 {
	return (α * β) / ((α + β) * (α + β) * (α + β + 1))
}

// ZZZZZZZZZZZZZStd returns the standard deviation of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZStd(α, β float64) float64 {
	v := (α * β) / ((α + β) * (α + β) * (α + β + 1))
	return math.Pow(v, 0.5)
}

// ZZZZZZZZZZZZZSkew returns the skewness of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZSkew(α, β float64) (s float64) {

	if α == β {	// symmetric case
		s = 0.0
	} else {
		num := 2 * (β - α) * math.Pow((α + β + 1), 0.5)
		den := (α + β + 2) * math.Pow((α * β), 0.5)
		s = num / den
	}
	return
}

// ZZZZZZZZZZZZZExKurt returns the excess kurtosis of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZExKurt(α, β float64) float64 {
	num := 6*((α - β)*(α - β)*(α + β + 1) - α * β * (α + β + 2))
	den := α * β * (α + β + 2) * (α + β + 2) 
	return num / den
}

// ZZZZZZZZZZZZZMGF returns the moment-generating function of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZMGF(n int64, p, t float64) float64 {
	return math.Pow((1- p + p* math.Exp(t)), float64(n))
}

// ZZZZZZZZZZZZZPGF returns the probability-generating function of the ZZZZZZZZZZZZZ distribution. 
func ZZZZZZZZZZZZZPGF(n int64, p, z float64) float64 {
	return math.Pow((1- p + p* z), float64(n))
}

